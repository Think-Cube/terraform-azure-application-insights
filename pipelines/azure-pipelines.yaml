name: $(MODULE_NAME)-$(date:yyyyMMdd)-$(rev:.r)
parameters:
- name: publish_module
  displayName: 'Publish Module ???'
  type: string
  default: 'false'
  values:
    - true
    - false
trigger:
  branches:
    include:
    - refs/heads/master
    - refs/heads/main
resources:
  repositories:
    - repository: self
variables:
  - name: TERRAFORM_SEC_VERSION
    value: "v1.26.0"
  - name: GITHUB_REPO
    value: "Think-Cube/terraform-azure-application-insights"
  - group: GITHUB-PAT-TOKEN
  - name: PUBLISH_MODULE
    value: ${{parameters.publish_module}}
  - name: VM_IMAGE
    value: ubuntu-latest
  - name: MODULE_NAME
    value: "terraform-azure-application-insights"
  - name: MODULE_DESCRIPTION
    value: "Terraform module for azure application insights"
pool:
  vmImage: $(VM_IMAGE)
stages:
  - stage: Validate_Terraform_Module
    displayName: 'Validate Terraform Module'
    jobs:
      - job: Validate_Terraform_Module
        displayName: 'Validate Terraform Module'
        steps:
        - checkout: self
          displayName: 'Checkout Module'
          fetchDepth: 1
        - task: TerraformInstaller@2
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: 'latest'
        - task: CmdLine@2
          displayName: 'Terraform Init'
          inputs:
            script: |
              terraform init
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: CmdLine@2
          displayName: 'Terraform Validate'
          inputs:
            script: |
              terraform validate
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: tfsec@1
          displayName: 'Terraform SEC check'
          inputs:
            version: '$(TERRAFORM_SEC_VERSION)'
            dir: '$(System.DefaultWorkingDirectory)'
  - stage: Publish_Terraform_Module
    condition: eq('${{parameters.publish_module}}', 'true')  
    displayName: 'Publish Terraform Module'
    jobs:
      - job: Publish_Terraform_Module
        displayName: 'Publish Terraform Module'
        steps:
        - checkout: self
        - task: CopyFiles@2
          displayName: 'Copy Terraform module files'
          inputs:
            SourceFolder: $(System.DefaultWorkingDirectory)
            Contents: '**.tf'
            TargetFolder: $(System.DefaultWorkingDirectory)/$(MODULE_NAME)        
        - task: CmdLine@2
          displayName: 'Fetch latest version and increment'
          inputs:
            script: |
              # Variables
              module_path="$(System.DefaultWorkingDirectory)/$(MODULE_NAME)"
              github_repo="$(GITHUB_REPO)"
              github_token="$(GITHUB_TOKEN)"
              description="New $(MODULE_DESCRIPTION) release"

              # Remove unnecessary files from the module directory
              find "$module_path" -name ".git" -type d -exec rm -rf {} +
              find "$module_path" -name ".github" -type d -exec rm -rf {} +

              # Fetch the latest tag and increment version
              latest_tag=$(git tag --list "v*" | sort -V | tail -n1)
              new_version="0.0.1"
              if [ -n "$latest_tag" ]; then
                IFS='.' read -r major minor patch <<< "${latest_tag#v}"
                if (( patch < 999 )); then
                  patch=$((patch + 1))
                else
                  patch=0
                  if (( minor < 999 )); then
                    minor=$((minor + 1))
                  else
                    minor=0
                    major=$((major + 1))
                  fi
                fi
                new_version="$major.$minor.$patch"
              fi

              # Create a tarball of the module
              tarball_name="$(MODULE_NAME)-v$new_version.tar.gz"
              tar -czf "$tarball_name" -C "$module_path" .

              # Publish to GitHub Releases using gh CLI
              echo "$github_token" | gh auth login --with-token
              gh release create "v$new_version" "$tarball_name" \
                --repo "$github_repo" \
                --title "$(MODULE_NAME) v$new_version" \
                --notes "$description"
